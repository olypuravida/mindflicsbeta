// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// import './models/user'

generator client {
  provider        = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        Int       @id @default(autoincrement())
  username  String    @unique
  email     String    @unique
  password  String
  secretKey String
  status    String    @default("ACTIVE")
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  info     UserInfo?
  roles    Role[]
  sessions Session[]
  bookings Booking[]
  reviews  Review[]

  @@map("users")
}

// UserInfo model
model UserInfo {
  id              Int       @id @default(autoincrement())
  user            User      @relation(fields: [userId], references: [id])
  userId          Int       @unique
  cityId          Int?
  countryId       Int?
  firstName       String
  lastName        String
  avatar          String?
  gender          String
  dateOfBirth     DateTime
  phoneNumber     String
  documentType    String
  documentNumber  String
  address         String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  city            City?      @relation(fields: [cityId], references: [id])
  country         Country?   @relation(fields: [countryId], references: [id])

  @@map("user_info")
}

// Role model
model Role {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  status    String    @default("ACTIVE")
  users     User[]
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  @@map("roles")
}

// Session model
model Session {
  id          Int       @id @default(autoincrement())
  accessToken String    @unique
  status      String    @default("ACTIVE")
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  @@map("sessions")
}

// Countries, states, cities
model Country {
  id              Int        @id
  name            String
  iso3            String
  iso2            String
  numeric_code    String
  phone_code      Int
  capital         String
  currency        String
  currency_name   String
  currency_symbol String
  tld             String
  native          String?
  region          String
  subregion       String
  latitude        String
  longitude       String
  emoji           String

  states          State[]
  UserInfo        UserInfo[]  @ignore
  Hotels          Hotel[]

  @@map("countries")
}

model State {
  id         Int     @id
  name       String
  countryId  Int
  state_code String

  country    Country @relation(fields: [countryId], references: [id])
  cities     City[]
  Hotels     Hotel[]

  @@map("states")
}

model City {
  id        Int        @id
  name      String
  latitude  String
  longitude String
  stateId   Int

  state     State      @relation(fields: [stateId], references: [id])
  UserInfo  UserInfo[] @ignore
  Hotels    Hotel[]

  @@map("cities")
}


// Hotels
model Hotel {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  address     String
  latitude    String
  longitude   String
  cityId      Int
  stateId     Int
  countryId   Int
  postalCode  String
  picture     String
  images      String
  available   Boolean      @default(true)
  rating      Float?
  amenities   String?
  policies    String?
  features    String?
  payments    String?
  status      String       @default("ACTIVE")
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  city        City         @relation(fields: [cityId], references: [id])
  state       State        @relation(fields: [stateId], references: [id])
  country     Country      @relation(fields: [countryId], references: [id])
  rooms       Room[]
  reviews     Review[]

  @@map("hotels")
}

// Rooms
model Room {
  id          Int       @id @default(autoincrement())
  hotelId     Int
  type        String
  description String?
  basePrice   Float
  taxes       Float
  discount    Float?
  location    String
  picture     String
  images      String
  available   Boolean   @default(true)
  beds        Int       @default(1)
  bathrooms   Int       @default(1)
  capacity    Int       @default(1)
  amenities   String?
  features    String?
  payments    String?
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  hotel       Hotel     @relation(fields: [hotelId], references: [id])
  bookings    Booking[]

  @@map("rooms")
}

// Bookings
model Booking {
  id          Int       @id @default(autoincrement())
  roomId      Int
  userId      Int
  checkIn     DateTime
  checkOut    DateTime
  guestInfo   String
  emergency   String
  status      String    @default("ACTIVE")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  room        Room      @relation(fields: [roomId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("bookings")
}

// Reviews
model Review {
  id          Int       @id @default(autoincrement())
  hotelId     Int
  userId      Int
  rating      Int       @default(0)
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  hotel       Hotel     @relation(fields: [hotelId], references: [id])
  user        User      @relation(fields: [userId], references: [id])

  @@map("reviews")
}
